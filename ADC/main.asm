;
; PE5_EX1.asm
;
; Created: 11/27/2023 1:49:48 PM
; Author : tuan minh
;


; Replace with your application code
.ORG 0
.EQU LCD_PORT = PORTB ; LCD DATA PORT
.EQU LCD_DDR = DDRB  ; LCD DATA DDR
.EQU LCD_PIN = PINB  ; LCD DATA PIN
.EQU ADC_PORT = PORTA ; ADC DATA PORT
.EQU ADC_DDR = DDRA  ; ADC DATA DDR
.EQU ADC_PIN = PINA  ; ADC DATA PIN
.EQU LCD_RS = 0 ; LCD RS
.EQU LCD_RW = 1 ; LCD RW
.EQU LCD_EN = 2 ; LCD EN
.EQU ADC0 = 0
.EQU ADC1 = 1
.DEF TEMP = R16
.DEF DATA_TEMP = R17
.DEF COUNTER = R17
.DEF LCD_TEMP = R19
.DEF OCRH = R12 
.DEF OCRL = R11
.DEF ADCL_TEMP = R24
.DEF ADCH_TEMP = R25
.DEF BCD0 = R24
.DEF BCD1 = R25
.DEF LOWBYTE = R21
.DEF HIGHBYTE = R22
.DEF CH = R2
.DEF CHM = R3
.DEF CLM = R4
.DEF CL = R5

MAIN:
		RCALL INIT_PORT
		RCALL INIT_LCD
		RCALL INIT_UART0 ; INITIALIZE USART0
		RCALL INIT_ADC

AGAIN:
		RCALL DELAY_1s
		RCALL SAMPLE_ADC
		RCALL DISPLAY
		RJMP AGAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT_PORT:
		LDI TEMP, 0b11110111
		OUT LCD_DDR, TEMP ; SET OUTPUT PORT TO LCD (DATA PA4 - PA7, RS = PA0, RW = PA1, EN = PA2)
		RCALL DELAY_20ms ; WAIT FOR LCD POWER UP
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT_UART0: 
		CLR TEMP
		STS UBRR0H, TEMP ; BAUDRATE 9600 bps
		LDI TEMP, 51
		STS UBRR0L, TEMP
		LDI TEMP, (1 << TXEN0) ; ENABLE UART0 TRANSMISSION
		STS UCSR0B, TEMP
		LDI TEMP, (1 << UCSZ01) | (1 << UCSZ00) ; ASYNC, 1 STOP-BIT, 1-BYTE DATA
		STS UCSR0C, TEMP
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT_ADC:
		LDI TEMP, (1 << REFS0) | (1 << REFS1) ; AVCC WITH XTAL CAP AT AREF PIN
		STS ADMUX, TEMP 
		LDI TEMP, (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) ; 
		STS ADCSRA, TEMP
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SAMPLE_ADC:
		LDS TEMP, ADCSRA
		ORI TEMP, (1 << ADSC) ; ADC START CONVERSION
		STS ADCSRA, TEMP

ADC_SAMPLE_LOOP:
		LDS TEMP, ADCSRA
		SBRS TEMP, ADIF
		RJMP ADC_SAMPLE_LOOP
		ORI TEMP, (1 << ADIF)
		STS ADCSRA, TEMP
		LDS ADCL_TEMP, ADCL
		LDS ADCH_TEMP, ADCH
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISPLAY:
		RCALL UART0_TRANSMIT ; TRANSMIT ADC VALUE TO PC
		RCALL CONVERT_ADC ; CONVERT ADC VALUE TO DECIMAL VALUE
		RCALL LCD_DISPLAY ; DISPLAY CONVERTED VALUE TO LCD
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UART0_TRANSMIT:
		LDI DATA_TEMP, 0x55
		RCALL DATA_TRANSMIT ; TRANSMIT 0x55
		MOV DATA_TEMP, ADCH_TEMP
		RCALL DATA_TRANSMIT ; TRANSMIT ADCH
		MOV DATA_TEMP, ADCL_TEMP
		RCALL DATA_TRANSMIT ; TRANSMIT ADCL
		LDI DATA_TEMP, 0xFF
		RCALL DATA_TRANSMIT ; TRANSMIT 0xFF
		RET

DATA_TRANSMIT:
		LDS TEMP, UCSR0A 
		SBRS TEMP, UDRE0
		RJMP DATA_TRANSMIT
		STS UDR0, DATA_TEMP
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; VIN = ADC*(VREF/1024)
; <=> VIN = ADC/(1024/VREF)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CONVERT_ADC:
		CLC
		CLR CH
		CLR CHM
		CLR CLM
		CLR CL
		MOVW R26:R27, ADCL_TEMP:ADCH_TEMP
		;LDI TEMP, LOW(5000)
		LDI TEMP, LOW(2560)
		;LDI DATA_TEMP, HIGH(5000)
		LDI DATA_TEMP, HIGH(2560)
		MUL R26, TEMP ; ADCL * LOW(5000)
		MOV CL, R0
		ADD CLM, R1
		MUL R26, DATA_TEMP ; ADCL * HIGH(5000)
		ADD CLM, R0
		BRCC PASS_CHM_CARRY_1
		INC CHM

PASS_CHM_CARRY_1:
		ADD CHM, R1
		MUL R27, TEMP ; ADCH * LOW(5000)
		ADD CLM, R0
		BRCC PASS_CHM_CARRY_2
		INC CHM

PASS_CHM_CARRY_2:
		ADD CHM, R1 
		MUL R27, DATA_TEMP ; ADCH * HIGH(5000)
		MOV CH, R1 ; CH = HIGH[ADCH * HIGH(5000)]
		BRCC PASS_CARRY_CH
		INC CH

PASS_CARRY_CH:
		ADD CHM, R0
		BRCC DIV_BY_1024
		INC CH
		
DIV_BY_1024: ; LOGIC TO PERFORM DIVISION BY 1024 OF 32-BIT
		LDI COUNTER, 11

DIV_LOOP:
		LSR CL
		LSR CLM
		BRCC SHIFT_CHM
		LDI TEMP, 0b10000000
		OR TEMP, CL
		MOV CL, TEMP

SHIFT_CHM:
		LSR CHM
		BRCC SHIFT_CH
		LDI TEMP, 0b10000000
		OR TEMP, CLM
		MOV CLM, TEMP

SHIFT_CH:
		LSR CH
		BRCC NEXT
		LDI TEMP, 0b10000000
		OR TEMP, CHM
		MOV CHM, TEMP

NEXT:
		DEC COUNTER
		BRNE DIV_LOOP
		MOV HIGHBYTE, CLM
		MOV LOWBYTE, CL
		RCALL BCD_CONVERSION 
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BCD_CONVERSION:
		LDI COUNTER, 16 ; MAX 2295 (12-BIT BIN)
		CLR BCD0
		CLR BCD1

BINTOBCD16:
		LSL LOWBYTE 
		BRCS SETFLAG
		LSL HIGHBYTE
		RJMP BCD_LOW

SETFLAG:
		LSL HIGHBYTE
		ORI HIGHBYTE, 1 ; BIT 7 LOWBYTE SHIFTED IN IS HIGH

BCD_LOW:
		BRCS SETBCD0
		LSL BCD0
		RJMP BCD_HIGH

SETBCD0:
		LSL BCD0
		ORI BCD0, 1 ; BIT 7 HIGHBYTE SHIFTED IN IS HIGH

BCD_HIGH:
		BRCS SETBCD1 
		LSL BCD1
		RJMP UPDATE

SETBCD1:
		LSL BCD1
		ORI BCD1, 1 ; BIT 7 BCD0 SHIFTED IN IS HIGH
		 
UPDATE: 
		DEC OCRL
		BRNE ADD3
		RET

ADD3: 
		LDI TEMP, 0x30
		ADD BCD1, TEMP ; ADD 3 TO BCD1 HIGH NIBBLE
		SBRS BCD1, 7
		SUB BCD1, TEMP
		LDI TEMP, 0x03
		ADD BCD1, TEMP ; ADD 3 TO BCD1 LOW NIBBLE
		SBRS BCD1, 3
		SUB BCD1, TEMP
		LDI TEMP, 0x30
		ADD BCD0, TEMP ; ADD 3 TO BCD0 HIGH NIBBLE
		SBRS BCD0, 7
		SUB BCD0, TEMP
		LDI TEMP, 0x03
		ADD BCD0, TEMP ; ADD 3 TO BCD0 LOW NIBBLE
		SBRS BCD0, 3
		SUB BCD0, TEMP 
		RJMP BINTOBCD16

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LCD_DISPLAY:
		MOV LCD_TEMP, BCD1
		ANDI LCD_TEMP, 0xF0
		SWAP LCD_TEMP
		SUBI LCD_TEMP, -48 
		RCALL DATAWRITE ; DISPLAY DECIMAL DIGIT
		LDI LCD_TEMP, '.'
		RCALL DATAWRITE ; DISPLAY DECIMAL POINT
		MOV LCD_TEMP, BCD1
		ANDI LCD_TEMP, 0x0F
		SUBI LCD_TEMP, -48
		RCALL DATAWRITE ; DISPLAY 1ST FRACTION DIGIT
		MOV LCD_TEMP, BCD0
		ANDI LCD_TEMP, 0xF0
		SWAP LCD_TEMP
		SUBI LCD_TEMP, -48
		RCALL DATAWRITE ; DISPLAY 2ND FRACTION DIGIT
		MOV LCD_TEMP, BCD0
		ANDI LCD_TEMP, 0x0F
		SUBI LCD_TEMP, -48
		RCALL DATAWRITE ; DISPLAY 1ST FRACTION DIGIT
		LDI LCD_TEMP, 0xC0
		RCALL CMDWRITE
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SDELAY:
		NOP
		NOP
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY_100us:
		LDI TEMP, 0x02
		MOV OCRL, TEMP
		LDI TEMP, 0x00
		MOV OCRH, TEMP
		RCALL DELAY
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY_1s:
		LDI TEMP, 0x11
		MOV OCRL, TEMP
		LDI TEMP, 0x7A
		MOV OCRH, TEMP
		RCALL DELAY
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY_20ms:
		LDI TEMP, 0x70
		MOV OCRL, TEMP
		LDI TEMP, 0x02
		MOV OCRH, TEMP
		RCALL DELAY
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY:
		LDI TEMP, 0b00001100 ; CTC MODE, CLK/256
		STS TCCR1B, TEMP
		STS OCR1AH, OCRH
		STS OCR1AL, OCRL
		CLR TEMP
		STS TCNT1H, TEMP
		STS TCNT1L, TEMP

DELAY_LOOP:
		SBIS TIFR1, OCF1A
		RJMP DELAY_LOOP 
		SBI TIFR1, OCF1A ; RESET TIMER1
		CLR TEMP
		STS TCCR1B, TEMP
		RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;LATER USE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT_LCD:
		LDI LCD_TEMP, 0x02 ; RETURN HOME
		CALL CMDWRITE
		LDI LCD_TEMP, 0x28 ; FUCNTION SET: 4-BIT, 2 LINES, 5x7 DOTS
		CALL CMDWRITE
		LDI LCD_TEMP, 0x0E ; DISPLAY ON, CURSOR ON
		CALL CMDWRITE
		LDI LCD_TEMP, 0x01 ; CLEAR DISPLAY SCREEN
		CALL CMDWRITE
		LDI LCD_TEMP, 0x80 ; FORCE CURSOR TO BEGIN OF 1ST ROW
		CALL CMDWRITE
		LDI ZH, HIGH(LAB_MSG0 << 1)
		LDI ZL, LOW(LAB_MSG0 << 1)

STRING0: 
		LPM LCD_TEMP, Z+
		CPI LCD_TEMP, 0
		BREQ NEXT_LINE
		RCALL DATAWRITE
		RJMP STRING0

NEXT_LINE: 
		LDI LCD_TEMP, 0xC5 ; FORCE CURSOR TO BEGIN OF 2ND ROW
		RCALL CMDWRITE
		LDI LCD_TEMP, 'V' ; VOLT 
		RCALL DATAWRITE
		LDI LCD_TEMP, 0xC0 ; FORCE CURSOR TO BEGIN OF 2ND ROW
		RCALL CMDWRITE
		RET

LAB_MSG0: .DB "VOLTAGE: ", 0
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CMDWRITE:
		RCALL DELAY_20ms
		MOV R18, LCD_TEMP
		ANDI R18, 0xF0 ; MASK LOW NIBBLE
		OUT LCD_PORT, R18    ; SEND HIGH NIBBLE
		SBI LCD_PORT, LCD_EN ; EN = 1 HIGH PULSE
		RCALL SDELAY          ; EXTEND EN PULSE
		CBI LCD_PORT, LCD_EN ; EN=0 FOR H-to-L PULSE
		RCALL DELAY_100us     

		SWAP LCD_TEMP
		ANDI LCD_TEMP, 0xF0 ; MASK HIGH NIBBLE
		OUT LCD_PORT, LCD_TEMP    ; SEND LOW NIBBLE
		SBI LCD_PORT, LCD_EN ; EN = 1 FOR HIGH PULSE
		RCALL SDELAY          ; EXTEND EN PULSE
		CBI LCD_PORT, LCD_EN ; EN=0 FOR H-to-L PULSE
		RCALL DELAY_100us
		RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DATAWRITE:
		RCALL DELAY_20ms
		MOV R18, LCD_TEMP
		ANDI R18, 0xF0 ; MASK LOW NIBBLE
		OUT LCD_PORT, R18    ; SEND HIGH NIBBLE
		SBI LCD_PORT, LCD_RS ; RS = 1 TO DATA
		SBI LCD_PORT, LCD_EN ; EN = 1 HIGH PULSE
		RCALL SDELAY          ; EXTEND EN PULSE
		CBI LCD_PORT, LCD_EN ; EN=0 FOR H-to-L PULSE
		RCALL DELAY_100us 

		SWAP LCD_TEMP
		ANDI LCD_TEMP, 0xF0 ; MASK HIGH NIBBLE
		OUT LCD_PORT, LCD_TEMP    ; SEND LOW NIBBLE
		SBI LCD_PORT, LCD_RS ; RS = 1 TO DATA
		SBI LCD_PORT, LCD_EN ; EN = 1 HIGH PULSE
		RCALL SDELAY          ; EXTEND EN PULSE
		CBI LCD_PORT, LCD_EN ; EN=0 FOR H-to-L PULSE
		RCALL DELAY_100us   
		RET

		
